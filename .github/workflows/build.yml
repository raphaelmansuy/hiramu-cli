name: Build

on:
  push:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  PROJECT_NAME: hiramu-cli
  PROJECT_DESC: "A Rust CLI tool"

jobs:
  build-and-release:
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest, target: arm-unknown-linux-gnueabihf, use-cross: true }
          - { os: ubuntu-latest, target: aarch64-unknown-linux-gnu, use-cross: true }
          - { os: ubuntu-latest, target: i686-unknown-linux-gnu, use-cross: true }
          - { os: ubuntu-latest, target: i686-unknown-linux-musl, use-cross: true }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu, use-cross: true }
          - { os: ubuntu-latest, target: x86_64-unknown-linux-musl, use-cross: true }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: macos-latest, target: aarch64-apple-darwin }
          - { os: windows-latest, target: i686-pc-windows-gnu }
          - { os: windows-latest, target: i686-pc-windows-msvc }
          - { os: windows-latest, target: x86_64-pc-windows-gnu }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.job.target }}
        override: true
        default: true

    - name: Install musl tools (Linux)
      if: contains(matrix.job.target, 'musl')
      run: sudo apt-get update && sudo apt-get install -y musl-tools

    - name: Install MinGW toolchain (Windows)
      if: contains(matrix.job.target, 'windows-gnu')
      uses: egor-tensin/setup-mingw@v2
      with:
        platform: ${{ matrix.job.target }}

    - name: Get Version
      id: get_version
      run: echo "VERSION=$(grep '^version = ' Cargo.toml | sed 's/^version = //' | sed 's/"//g')" >> $GITHUB_ENV

    - name: Build Release Binary
      run: |
        if [ "${{ matrix.job.use-cross }}" = "true" ]; then
          cargo install cross
          cross build --release --target ${{ matrix.job.target }} --verbose
        else
          cargo build --release --target ${{ matrix.job.target }} --verbose
        fi
      env:
        OPENSSL_DIR: /usr/local/opt/openssl
        PKG_CONFIG_ALLOW_CROSS: 1

    - name: Strip release binary (Unix)
      if: matrix.job.target != 'x86_64-pc-windows-msvc'
      run: strip "target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.VERSION }}
        release_name: Release v${{ env.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/${{ matrix.job.target }}/release/${{ env.PROJECT_NAME }}
        asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.job.target }}
        asset_content_type: application/octet-stream