name: Rust CI/CD Pipeline

on:
  push:
    branches:
      - master
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and Upload Artifact
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - build: linux
            os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
          - build: macos
            os: macos-11
            target: x86_64-apple-darwin
          - build: windows
            os: windows-2019
            target: x86_64-pc-windows-msvc
          - build: macos_arm64
            os: macos-11
            target: aarch64-apple-darwin

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set Up Environment Variables
        shell: bash
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "CARGO_HOME=$RUNNER_TEMP/cargo" >> $GITHUB_ENV
          echo "RUSTUP_HOME=$RUNNER_TEMP/rustup" >> $GITHUB_ENV

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.CARGO_HOME }}/registry
            ${{ env.CARGO_HOME }}/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Install OpenSSL Dependencies
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          echo "OPENSSL_DIR=/usr/include/openssl" >> $GITHUB_ENV

      - name: Install OpenSSL via Homebrew
        if: startsWith(matrix.os, 'macos')
        run: |
          brew install openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV

      - name: Set Up Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build Project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target ${{ matrix.target }}

      - name: Package Build Artifacts
        shell: bash
        run: |
          binary_name="hiramu-cli"
          dirname="${binary_name}-${{ env.VERSION }}-${{ matrix.target }}"
          mkdir "$dirname"
          if [ "${{ matrix.os }}" == "windows-2019" ]; then
            mv "target/${{ matrix.target }}/release/${binary_name}.exe" "$dirname/"
            Compress-Archive -Path "$dirname" -DestinationPath "$dirname.zip"
            echo "ASSET_PATH=$dirname.zip" >> $GITHUB_ENV
          else
            mv "target/${{ matrix.target }}/release/${binary_name}" "$dirname/"
            tar -czvf "$dirname.tar.gz" "$dirname"
            echo "ASSET_PATH=$dirname.tar.gz" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ env.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}